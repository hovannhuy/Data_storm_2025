# -*- coding: utf-8 -*-
"""pose_extractor

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1Jf908hxjzvYChNAMxr1RNeDbvyq3pIMG
"""

import cv2
import mediapipe as mp
import numpy as np
import math

class PoseFeatureExtractor:
    def __init__(self, min_detection_confidence=0.6, model_complexity=2):
        self.mp_pose = mp.solutions.pose
        self.pose = self.mp_pose.Pose(
            static_image_mode=True,
            min_detection_confidence=min_detection_confidence,
            model_complexity=model_complexity
        )

    def extract_features(self, frame):
        """Trích xuất các đặc trưng hình học từ một frame ảnh duy nhất."""
        results = self.pose.process(cv2.cvtColor(frame, cv2.COLOR_BGR2RGB))
        if not results.pose_landmarks:
            return None

        return self._calculate_geometric_features(results.pose_landmarks, frame.shape)

    def _calculate_geometric_features(self, landmarks, shape):
        """Hàm nội bộ để tính toán các góc và tỷ lệ."""
        lm_enum = self.mp_pose.PoseLandmark
        coords = {name: self._get_landmark_coords(landmarks, lm_enum[name], shape) for name in lm_enum._member_map_}

        required_landmarks = [
            "LEFT_SHOULDER", "RIGHT_SHOULDER", "LEFT_HIP", "RIGHT_HIP",
            "LEFT_KNEE", "RIGHT_KNEE", "LEFT_ANKLE", "RIGHT_ANKLE",
            "LEFT_WRIST", "LEFT_ELBOW", "RIGHT_WRIST", "RIGHT_ELBOW"
        ]
        if any(coords[name] is None for name in required_landmarks):
            return {}

        features = {}
        # Các hàm helper được lồng vào trong để class độc lập hơn
        def _calc_3p_angle(p1, p2, p3):
            try:
                v1 = np.array(p1) - np.array(p2)
                v2 = np.array(p3) - np.array(p2)
                cosine = np.dot(v1, v2) / (np.linalg.norm(v1) * np.linalg.norm(v2))
                return np.degrees(np.arccos(np.clip(cosine, -1.0, 1.0)))
            except: return None

        def _calc_inclination(p1, p2):
            try:
                return np.degrees(math.atan2(p2[1] - p1[1], p2[0] - p1[0]))
            except: return None

        features['left_arm_angle'] = _calc_3p_angle(coords["LEFT_WRIST"], coords["LEFT_ELBOW"], coords["LEFT_SHOULDER"])
        features['right_arm_angle'] = _calc_3p_angle(coords["RIGHT_WRIST"], coords["RIGHT_ELBOW"], coords["RIGHT_SHOULDER"])
        features['left_knee_angle'] = _calc_3p_angle(coords["LEFT_HIP"], coords["LEFT_KNEE"], coords["LEFT_ANKLE"])
        features['right_knee_angle'] = _calc_3p_angle(coords["RIGHT_HIP"], coords["RIGHT_KNEE"], coords["RIGHT_ANKLE"])
        features['shoulders_inclination'] = _calc_inclination(coords["LEFT_SHOULDER"], coords["RIGHT_SHOULDER"])
        features['hips_inclination'] = _calc_inclination(coords["LEFT_HIP"], coords["RIGHT_HIP"])
        features['pelvis_angle'] = _calc_3p_angle(coords["LEFT_ANKLE"], coords["LEFT_HIP"], coords["RIGHT_SHOULDER"])

        midpoint_ankles_x = (coords["LEFT_ANKLE"][0] + coords["RIGHT_ANKLE"][0]) / 2
        wrist_midpoint_offset_x = coords["LEFT_WRIST"][0] - midpoint_ankles_x
        shoulder_width = np.linalg.norm(np.array(coords["LEFT_SHOULDER"]) - np.array(coords["RIGHT_SHOULDER"]))
        if shoulder_width > 0:
            features['wrist_midpoint_offset_x_ratio'] = wrist_midpoint_offset_x / shoulder_width

        return {k: v for k, v in features.items() if v is not None}

    def _get_landmark_coords(self, landmarks, landmark_enum, shape):
        try:
            lm = landmarks.landmark[landmark_enum]
            if lm.visibility < 0.5: return None
            return (int(lm.x * shape[1]), int(lm.y * shape[0]))
        except: return None